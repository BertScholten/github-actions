name: "Build and publish Docker images for a generic AERIUS Java project"
description: "Build and publish Docker images AERIUS Java project - this is an addition to the main-action"
inputs:
   GITHUB_TOKEN:
     required: true
     description: "Just pass the secrets.GITHUB_TOKEN to this action as input."
   DOCKER_REGISTRY:
     required: false
     description: "The Docker registry to push to."
     default: "nexus-docker.aerius.nl"
   DOCKER_REGISTRY_USERNAME:
     required: true
     description: "The Docker Registry username needed to publish packages."
   DOCKER_REGISTRY_PASSWORD:
     required: true
     description: "The Docker Registry password needed to publish packages."
   DOCKER_IMAGE_NAME:
     required: true
     description: "The Docker image name to use when publishing."
   ROOT_POM_DIRECTORY:
     required: false
     description: "The directory where the root POM can be found."
     default: "."
   DOCKERFILE_DIRECTORY:
     required: false
     description: "The directory where the Dockerfile can be found."
     default: "."
   JAVA_VERSION:
     required: false
     description: "The Java version to use when building the project."
     default: 11

runs:
  using: "composite"
  steps:
    #
    # Checkout the code - for PR's we need to checkout the PR itself instead of the branch the PR is based on.
    #
    - if: github.event_name != 'pull_request_target'
      name: checkout (general)
      uses: actions/checkout@v2
    - if: github.event_name == 'pull_request_target'
      name: checkout (pull_request)
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}

    # Setup JDK - default to version 11, override by providing JAVA_VERSION as input.
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ inputs.JAVA_VERSION }}

    #
    # Publish packages.
    # Only if it's a SNAPSHOT version or when it's a release version if triggered by a release event.
    #
    - name: Publish - get Maven project version
      id: get_maven_project_version
      shell: bash
      run: |
        VERSION=$(mvn -Dexpression=project.version -q -DforceStdout -f ${{ inputs.ROOT_POM_DIRECTORY }}/pom.xml help:evaluate 2>/dev/null)
        echo "::set-output name=version::${VERSION}"
    # Artifacts should only be published if a release is made, otherwise only on pushes with a SNAPSHOT version
    - if: github.event_name == 'release' || (github.event_name == 'push' && endsWith(steps.get_maven_project_version.outputs.version, '-SNAPSHOT'))
      name: Publish Docker image
      uses: elgohr/Publish-Docker-Github-Action@v4
      with:
        name: ${{ inputs.DOCKER_IMAGE_NAME }}
        username: ${{ inputs.DOCKER_REGISTRY_USERNAME }}
        password: ${{ inputs.DOCKER_REGISTRY_PASSWORD }}
        registry: ${{ inputs.DOCKER_REGISTRY }}
        workdir: ${{ inputs.DOCKERFILE_DIRECTORY }}/
        tag_semver: true
        no_push: ${{ github.event_name != 'release' }}
